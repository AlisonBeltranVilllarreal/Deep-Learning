import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report


# Cargar el dataset iris
iris = load_iris()
X, y = iris.data, iris.target
df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
df['target'] = iris.target
df.head()

# Mostrar parte del dataset
print(df.head())

# Gráfico de dispersión entre dos características
sns.scatterplot(x='sepal length (cm)', y='sepal width (cm)', hue='target', data=df)
plt.title('Gráfico de Dispersión de Iris')
plt.show()

# Pairplot para visualizar relaciones
sns.pairplot(df, hue='target', diag_kind='kde')
plt.show()

# Matriz de correlación y heatmap
corr_matrix = df.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Mapa de Calor de Correlación')
plt.show()

# Dividir datos en entrenamiento y prueba
X = df.drop(columns=['target']).values
y = df['target'].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Escalar los datos para normalizarlos
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Definir y entrenar el modelo MLP
mlp = MLPClassifier(hidden_layer_sizes=(10, 5), activation='relu', solver='adam',
                    learning_rate='constant', max_iter=1000, random_state=42)

# Entrenar el modelo con los datos escalados
mlp.fit(X_train, y_train)

# Predicción y evaluación del modelo
y_pred = mlp.predict(X_test)

# Calcular la precisión
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Mostrar matriz de confusión
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.title('Matriz de Confusión')
plt.xlabel('Predicho')
plt.ylabel('Real')
plt.show()

# Reporte de clasificación
report = classification_report(y_test, y_pred, target_names=iris.target_names)
print(report)
